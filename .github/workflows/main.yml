name: CI

on: [ push, pull_request ]

env:
  CARGO_TERM_COLOR: always

jobs:
  tests:
    name: "Test suite"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ macos-14, windows-latest, ubuntu-latest ]
        build-type: [ Debug, Release ]
        rust:
          - nightly
    steps:
      - uses: actions/checkout@v4
      - uses: ilammy/msvc-dev-cmd@v1

      - name: Install (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build
          echo "CC=gcc-13" >> $GITHUB_ENV
          echo "CXX=g++-13" >> $GITHUB_ENV
      - name: Install (macOS)
        if: runner.os == 'macOS'
        run: brew install ninja
      - name: Install (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install ninja
          echo "CC=cl" >> $GITHUB_ENV
          echo "CXX=cl" >> $GITHUB_ENV

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
          components: rustfmt, clippy

      - name: Configure project
        run: cmake -G Ninja -S . -B build -DCMAKE_BUILD_TYPE=${{ matrix.build-type }}
        shell: bash

      - name: Build project
        run: cmake --build build
        shell: bash

      - name: Test project
        run: ctest --test-dir build
        shell: bash
  
  lints:
    name: Lints
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ macos-latest, windows-latest, ubuntu-latest ]
        rust:
          - nightly
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
          components: rustfmt, clippy

      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: Run cargo clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --workspace -- -D warnings
